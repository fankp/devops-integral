// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: role.proto

package devops_integral_upm_srv_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RoleService service

type RoleService interface {
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...client.CallOption) (*RoleResp, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...client.CallOption) (*RoleResp, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...client.CallOption) (*DeleteRoleResp, error)
	// 根据角色名称查询角色
	SelectRolesByName(ctx context.Context, in *SelectRoleReq, opts ...client.CallOption) (*SelectRolesResp, error)
	// 给角色授权
	AccessRole(ctx context.Context, in *AccessRoleReq, opts ...client.CallOption) (*AccessRoleResp, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "devops.integral.upm.srv.service"
	}
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...client.CallOption) (*RoleResp, error) {
	req := c.c.NewRequest(c.name, "RoleService.CreateRole", in)
	out := new(RoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...client.CallOption) (*RoleResp, error) {
	req := c.c.NewRequest(c.name, "RoleService.UpdateRole", in)
	out := new(RoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...client.CallOption) (*DeleteRoleResp, error) {
	req := c.c.NewRequest(c.name, "RoleService.DeleteRole", in)
	out := new(DeleteRoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) SelectRolesByName(ctx context.Context, in *SelectRoleReq, opts ...client.CallOption) (*SelectRolesResp, error) {
	req := c.c.NewRequest(c.name, "RoleService.SelectRolesByName", in)
	out := new(SelectRolesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) AccessRole(ctx context.Context, in *AccessRoleReq, opts ...client.CallOption) (*AccessRoleResp, error) {
	req := c.c.NewRequest(c.name, "RoleService.AccessRole", in)
	out := new(AccessRoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq, *RoleResp) error
	// 更新角色
	UpdateRole(context.Context, *UpdateRoleReq, *RoleResp) error
	// 删除角色
	DeleteRole(context.Context, *DeleteRoleReq, *DeleteRoleResp) error
	// 根据角色名称查询角色
	SelectRolesByName(context.Context, *SelectRoleReq, *SelectRolesResp) error
	// 给角色授权
	AccessRole(context.Context, *AccessRoleReq, *AccessRoleResp) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		CreateRole(ctx context.Context, in *CreateRoleReq, out *RoleResp) error
		UpdateRole(ctx context.Context, in *UpdateRoleReq, out *RoleResp) error
		DeleteRole(ctx context.Context, in *DeleteRoleReq, out *DeleteRoleResp) error
		SelectRolesByName(ctx context.Context, in *SelectRoleReq, out *SelectRolesResp) error
		AccessRole(ctx context.Context, in *AccessRoleReq, out *AccessRoleResp) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) CreateRole(ctx context.Context, in *CreateRoleReq, out *RoleResp) error {
	return h.RoleServiceHandler.CreateRole(ctx, in, out)
}

func (h *roleServiceHandler) UpdateRole(ctx context.Context, in *UpdateRoleReq, out *RoleResp) error {
	return h.RoleServiceHandler.UpdateRole(ctx, in, out)
}

func (h *roleServiceHandler) DeleteRole(ctx context.Context, in *DeleteRoleReq, out *DeleteRoleResp) error {
	return h.RoleServiceHandler.DeleteRole(ctx, in, out)
}

func (h *roleServiceHandler) SelectRolesByName(ctx context.Context, in *SelectRoleReq, out *SelectRolesResp) error {
	return h.RoleServiceHandler.SelectRolesByName(ctx, in, out)
}

func (h *roleServiceHandler) AccessRole(ctx context.Context, in *AccessRoleReq, out *AccessRoleResp) error {
	return h.RoleServiceHandler.AccessRole(ctx, in, out)
}
