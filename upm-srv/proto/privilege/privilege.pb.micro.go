// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: privilege.proto

package devops_integral_upm_srv_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PrivilegeService service

type PrivilegeService interface {
	// 查询允许访问的权限清单
	SelectPrivilegeCodes(ctx context.Context, in *SelectPrivilegesReq, opts ...client.CallOption) (*SelectPrivilegeCodesResp, error)
	// 进行鉴权
	CheckPrivilege(ctx context.Context, in *CheckPrivilegeReq, opts ...client.CallOption) (*CheckPrivilegeResp, error)
	// 查询允许访问的权限组清单
	SelectPrivilegeGroups(ctx context.Context, in *SelectPrivilegesReq, opts ...client.CallOption) (*SelectPrivilegeGroupsResp, error)
}

type privilegeService struct {
	c    client.Client
	name string
}

func NewPrivilegeService(name string, c client.Client) PrivilegeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "devops.integral.upm.srv.service"
	}
	return &privilegeService{
		c:    c,
		name: name,
	}
}

func (c *privilegeService) SelectPrivilegeCodes(ctx context.Context, in *SelectPrivilegesReq, opts ...client.CallOption) (*SelectPrivilegeCodesResp, error) {
	req := c.c.NewRequest(c.name, "PrivilegeService.SelectPrivilegeCodes", in)
	out := new(SelectPrivilegeCodesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privilegeService) CheckPrivilege(ctx context.Context, in *CheckPrivilegeReq, opts ...client.CallOption) (*CheckPrivilegeResp, error) {
	req := c.c.NewRequest(c.name, "PrivilegeService.CheckPrivilege", in)
	out := new(CheckPrivilegeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privilegeService) SelectPrivilegeGroups(ctx context.Context, in *SelectPrivilegesReq, opts ...client.CallOption) (*SelectPrivilegeGroupsResp, error) {
	req := c.c.NewRequest(c.name, "PrivilegeService.SelectPrivilegeGroups", in)
	out := new(SelectPrivilegeGroupsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PrivilegeService service

type PrivilegeServiceHandler interface {
	// 查询允许访问的权限清单
	SelectPrivilegeCodes(context.Context, *SelectPrivilegesReq, *SelectPrivilegeCodesResp) error
	// 进行鉴权
	CheckPrivilege(context.Context, *CheckPrivilegeReq, *CheckPrivilegeResp) error
	// 查询允许访问的权限组清单
	SelectPrivilegeGroups(context.Context, *SelectPrivilegesReq, *SelectPrivilegeGroupsResp) error
}

func RegisterPrivilegeServiceHandler(s server.Server, hdlr PrivilegeServiceHandler, opts ...server.HandlerOption) error {
	type privilegeService interface {
		SelectPrivilegeCodes(ctx context.Context, in *SelectPrivilegesReq, out *SelectPrivilegeCodesResp) error
		CheckPrivilege(ctx context.Context, in *CheckPrivilegeReq, out *CheckPrivilegeResp) error
		SelectPrivilegeGroups(ctx context.Context, in *SelectPrivilegesReq, out *SelectPrivilegeGroupsResp) error
	}
	type PrivilegeService struct {
		privilegeService
	}
	h := &privilegeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PrivilegeService{h}, opts...))
}

type privilegeServiceHandler struct {
	PrivilegeServiceHandler
}

func (h *privilegeServiceHandler) SelectPrivilegeCodes(ctx context.Context, in *SelectPrivilegesReq, out *SelectPrivilegeCodesResp) error {
	return h.PrivilegeServiceHandler.SelectPrivilegeCodes(ctx, in, out)
}

func (h *privilegeServiceHandler) CheckPrivilege(ctx context.Context, in *CheckPrivilegeReq, out *CheckPrivilegeResp) error {
	return h.PrivilegeServiceHandler.CheckPrivilege(ctx, in, out)
}

func (h *privilegeServiceHandler) SelectPrivilegeGroups(ctx context.Context, in *SelectPrivilegesReq, out *SelectPrivilegeGroupsResp) error {
	return h.PrivilegeServiceHandler.SelectPrivilegeGroups(ctx, in, out)
}
